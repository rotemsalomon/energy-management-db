node {
  name = "emqx@127.0.0.1"
  cookie = "1724ba4b45d1370b85b41dca467b9aaa"
  data_dir = "/var/lib/emqx"
  ## Type: Periodic garbage collection interval
  global_gc_interval = 15m
}

cluster {
    ## Human-friendly name of the EMQX cluster.
    name = emqxcl

    ## Service discovery method for the cluster nodes
    discovery_strategy = manual

    ## If true, the node will try to heal network partitions automatically
    autoheal = true
 }

dashboard {
    ## JWT token expiration time
    token_expired_time = 60m

    ## Support Cross-Origin Resource Sharing (CORS)
    cors = false

    listeners.http {
        # bind = 0 to disable this listener
        bind = "0.0.0.0:18083" ## or just a port number, e.g. 18083
    }
}

## Configures MQTT over TLS.
listeners.ssl.my_ssl_listener_name {
    bind = 8884 ## or with an IP e.g. "127.0.0.1:8883"
    acceptors = 16
    enable_authn = true
    max_connections = infinity
    mountpoint = ""
    proxy_protocol = false
    proxy_protocol_timeout = 3s
    tcp_options {
        active_n = 100
        backlog = 1024
        buffer = 4KB
        high_watermark = 1MB
        keepalive = none
        nodelay = true
        reuseaddr = true
        send_timeout = 15s
        send_timeout_close = true
    }
    ssl_options {
        ## Trusted PEM format CA certificates bundle file
        cacertfile = "/etc/emqx/ssl/ca.pem"

        ## PEM format certificates chain file
        certfile = "/etc/emqx/ssl/server.pem"

        ## PEM format private key file
        keyfile = "/etc/emqx/ssl/server.key"

        ## Enable or disable peer verification
        verify = verify_peer  ## use verify_peer to enable

        ## if `verify' is enabled, whit true, the connection fails if the client does not have a certificate to send
        fail_if_no_peer_cert = true

        ## Enable TLS session reuse
        reuse_sessions = true

        ## Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path
        depth = 10

        ## Which versions are to be supported
        versions = [tlsv1.3, tlsv1.2]

        ## TLS cipher suite names
        ## Note: By default, all available suites are supported, you do not need to set this
        ciphers = "TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,ECDHE-RSA-AES256-GCM-SHA384"

        ## Allows a client and a server to renegotiate the parameters of the SSL connection on the fly
        secure_renegotiate = true

        ## Log level for SSL communication
        ## Type: emergency | alert | critical | error | warning | notice | info | debug | none | all
        log_level = debug
    }
}

## Configuration for username/password authentication:
#authentication.allow_anonymous = false
#authentication.default = username
#security.auth.module = emqx_auth_username
#security.auth.username_file = "/etc/emqx/auth/username.txt"

log.file {
    ## Log level
    ## Type: debug | info | notice | warning | error | critical | alert | emergency
    level = info

    ## Log formatter, text for free text, and json for more structured logging
    ## Type: text | json
    formatter = text

    ## Time offset for formatting the timestamp
    ## Type:
    ##   - system :: local system time
    ##   - utc :: UTC time
    ##   - +-[hh]:[mm]: user specified time offset, such as "-02:00" or "+00:00" Defaults to: system
    time_offset = system

    ## Maximum number of log files
    ## Type: Range from 1 to 128
    rotation_count = 10

    ## This parameter controls log file rotation
    ## Type:
    ##  - infinity :: the log file will grow indefinitely
    ##  - ByteSize :: the log file will be rotated once it reaches this value in bytes
    rotation_size = 50MB
}