
vi /etc/systemd/system/tasmota_sqlite3.service
[Unit]
Description=Tasmota Data Fetch Sqlite Service
After=network.target

[Service]
ExecStart=/usr/bin/python3 /root/projects/tasmota/get_tasmota_sqlite3.py
WorkingDirectory=/root/projects/tasmota
Restart=always
User=root
Group=root
StandardOutput=append:/var/log/tasmota_sqlite3_service.log
StandardError=append:/var/log/tasmota_sqlite3_service_error.log
Environment=PYTHONUNBUFFERED=1

[Install]
WantedBy=multi-user.target

sudo systemctl daemon-reload
sudo systemctl restart tasmota_sqlite3.service
sudo systemctl status tasmota_sqlite3.service

sudo apt-get install sqlite3
sqlite3 --version

sqlite3 /root/projects/tasmota/sqlite3_db/tasmota_data.db
sqlite> SELECT * FROM tasmota_energy_data;
sqlite> pragma table_info(tasmota_energy_data);
sqlite> SELECT * FROM tasmota_energy_data ORDER BY id DESC LIMIT 10;
sqlite> SELECT COUNT(*) FROM tasmota_energy_data;
SELECT response_time, power FROM tasmota_energy_data ORDER BY id DESC LIMIT 100;

sqlite> .tables
tasmota_energy_data
sqlite> .schema tasmota_energy_data

SQL Views:
Create a view that list of an organisation's premises and assets
Source tables: org_info, prem_info, asset_info

DROP VIEW IF EXISTS vDeployment;

CREATE VIEW vDeployment AS
SELECT
    oi.org_id,
    oi.org_name,
    pi.premise_id,
    pi.premise_name,
    ai.asset_id,
    ai.name AS asset_name
FROM
    org_info oi
JOIN
    prem_info pi ON oi.org_id = pi.org_id
LEFT JOIN
    asset_info ai ON ai.org_id = pi.org_id AND ai.premise_id = pi.premise_id;

Create a view that list a count of an organisation's premises and assets
Source tables: inventory_view
        ## View name: 
            ## vInventory_totals
        Sqlite query:
            CREATE VIEW vInventory_totals AS
               SELECT DISTINCT 
                org_id,
               COUNT 
                (premise_id) as premise_count,
               COUNT
                (asset_id) as asset_count
               FROM 
                vInventory_list;



          premiseStatus:
            type: string
            description: reachability status of asset
            example: reachable
          assetPowerStatus:
            type: string
            description: Power status of asset
            example: on

Turn on headers for SQLite when doing a select
sqlite> .headers on
sqlite> .mode table

In the daily table:
* total_kwh: Cumulative kWh for each individual asset from the start of the day to the current time.
* daily_total_kwh: Cumulative kWh for all assets combined from the start of the day to the current time.
>>> NEED THIS FOR ALL ASSETS >>> * percentage_change_kwh stores the relative change in energy usage for a specific asset, for the same time periods (today vs yesterday). It is based on total_kwh values and thus 
is a % change comparing cumulative kwh usage up to the current hour for both days. 


Per asset:
current_hour_kwh: This should reflect the cumulative kWh for that specific asset in the current hour.
total_kwh: This should be the cumulative kWh for each specific asset from the start of the day to the current time.
total_kwh_charge: The total kwh charge for the asset until this hour
percentage_change_kwh: stores the relative change in energy usage for a specific asset, for the same time periods (today vs yesterday). It is based on total_kwh values and thus 
is a % change comparing cumulative kwh usage up to the current hour for both days.


All assets
daily_total_kwh: This should be the cumulative kWh for all assets from the start of the day to the current time.
daily_total_kwh_charge: Total kwh for all kwh used by all assets from the start of the day until current time.

## add column
ALTER TABLE daily_usage ADD COLUMN is_benchmark INTEGER DEFAULT 0;

## Set benchmark entries
python3 benchmark_asset_daily_entries.py {arguments - refer script}


CREATE TABLE daily_saving (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    update_time TEXT,
    asset_id TEXT,
    asset_name TEXT,
    date TEXT,
    hour INTEGER,
    day_of_week TEXT,
    total_kwh_reduction REAL,
    total_kwh_charge_reduction REAL,
    total_kwh_co2e_reduction REAL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS daily_saving (
    update_time TEXT,
    asset_id TEXT,
    asset_name TEXT,
    date TEXT,
    hour TEXT,
    day_of_week TEXT,
    total_kwh_reduction REAL,
    total_kwh_charge_reduction REAL,
    total_kwh_co2e_reduction REAL,
    PRIMARY KEY (asset_id, date, hour)  -- Composite primary key
);

PRAGMA index_info(daily_saving);  ## Display index name
sqlite> PRAGMA index_info(sqlite_autoindex_daily_saving_1);

SELECT total_kwh, total_kwh_co2e, total_kwh_charge FROM daily_usage
    WHERE asset_id = "DC234SN" AND is_benchmark = 1 AND day_of_week = "Friday" AND hour = "17:00";


sqlite> SELECT asset_id, asset_name, SUM(power) AS total_power, MIN(response_time) AS start_time, MAX(response_time) AS end_time
FROM tasmota_energy_data
WHERE response_time >= '2024-09-30 03:00:00'
  AND response_time < '2024-09-30 03:59:59'
GROUP BY asset_id, asset_name
ORDER BY response_time;
